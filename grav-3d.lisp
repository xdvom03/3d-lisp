(defun start-program ()
  (defparameter *particles* nil)
  (defparameter *G* 10000)
  (defparameter *step* 0.02)
  (defparameter *draw-lines* nil)
  (defparameter *draw-particles* t)
  (add-particle '(503 624 0) '(4.66 4.32 0) 1 1)
  (add-particle '(600 600 0) '(-9.3 -8.647 0) 1 1)
  (add-particle '(697 576 0) '(4.66 4.32 0) 1 1))

(defun add-particle (position speed mass charge)
  (push (list position speed mass charge) *particles*))

(defun draw (time)
  (let ((new-particles nil))
    ;;Generation part
    (dolist (p *particles*)
      (let ((net-Fx 0)
            (net-Fy 0)
            (net-Fz 0))
        (dolist (p2 *particles*)
          (if (not (equal p p2))
              (let* ((dst (sqrt (reduce #'+
                                        (mapcar #'(lambda (a) (* a a))
                                                (mapcar #'-
                                                        (first p)
                                                        (first p2))))))
                     (force (/ (* (fourth p) (fourth p2) *G* -1)
                               (* dst dst)))
                     (dst-x (- (first (first p)) (first (first p2))))
                     (dst-y (- (second (first p)) (second (first p2))))
                     (dst-z (- (third (first p)) (third (first p2))))
                     (force-x (* force (/ dst-x dst)))
                     (force-y (* force (/ dst-y dst)))
                     (force-z (* force (/ dst-z dst))))
                (incf net-Fx force-x)
                (incf net-Fy force-y)
                (incf net-Fz force-z))))
        (push (list (mapcar #'(lambda (pos spd) (+ pos (* spd time)))
                            (first p)
                            (second p))
                    (mapcar #'(lambda (spd acc) (+ spd (* acc time)))
                            (second p)
                            (list (/ net-Fx (third p))
                                  (/ net-Fy (third p))
                                  (/ net-Fz (third p))))
                    (third p)
                    (fourth p))
              new-particles)))
    (setf *particles* (reverse new-particles))))
